import oracle.GetService;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tx.gas.StaticGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.InputAndOutputResult;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoderFactory;
import org.springframework.context.ApplicationContext;
import service.serviceIMPL.serviceIMPL1;

import java.math.BigInteger;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class Oracle {
    GetService getService;
    String abi = "[{\"constant\":false,\"inputs\":[{\"name\":\"d\",\"type\":\"string\"}],\"name\":\"addRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"returnResult\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"returnIp\",\"outputs\":[{\"name\":\"ip\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destChainId\",\"type\":\"uint256\"},{\"name\":\"srclocalChainUser\",\"type\":\"address\"},{\"name\":\"destCrossChainUser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveUsersCrossChainMessage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destCrossChainUser\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"ip\",\"type\":\"string\"}],\"name\":\"toTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"popRequest\",\"outputs\":[{\"name\":\"r\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"dest\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]";
    String bin = "60806040523480156200001157600080fd5b50604051602080620010888339810180604052810190808051906020019092919050505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506065600560000181620000cb9190620000d3565b5050620001a7565b815481835581811115620000fd57818360005260206000209182019101620000fc919062000102565b5b505050565b6200013091905b808211156200012c576000818162000122919062000133565b5060010162000109565b5090565b90565b50805460018160011615610100020316600290046000825580601f106200015b57506200017c565b601f0160209004906000526020600020908101906200017b91906200017f565b5b50565b620001a491905b80821115620001a057600081600090555060010162000186565b5090565b90565b610ed180620001b76000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063128d72151461007d5780631801a346146100e65780633363024f14610176578063582a35001461020657806380a03b411461027d578063e4690a0b14610310575b600080fd5b34801561008957600080fd5b506100e4600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506103a0565b005b3480156100f257600080fd5b506100fb6103ae565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013b578082015181840152602081019050610120565b50505050905090810190601f1680156101685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561018257600080fd5b5061018b610450565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101cb5780820151818401526020810190506101b0565b50505050905090810190601f1680156101f85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021257600080fd5b5061027b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061052f565b005b34801561028957600080fd5b5061030e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610938565b005b34801561031c57600080fd5b50610325610a98565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561036557808201518184015260208101905061034a565b50505050905090810190601f1680156103925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103ab600582610b88565b50565b606060048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104465780601f1061041b57610100808354040283529160200191610446565b820191906000526020600020905b81548152906001019060200180831161042957829003601f168201915b5050505050905090565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105255780601f106104fa57610100808354040283529160200191610525565b820191906000526020600020905b81548152906001019060200180831161050857829003601f168201915b5050505050905090565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691508173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e86306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d602081101561065057600080fd5b810190808051906020019092919050505090506000811115156106db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f7573657220646f206e6f74206465706f73697420616e792076616c756500000081525060200191505060405180910390fd5b8360008088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600088815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156107fb57fe5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd86600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b505050506040513d602081101561091e57600080fd5b810190808051906020019092919050505050505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a0257600080fd5b505af1158015610a16573d6000803e3d6000fd5b505050506040513d6020811015610a2c57600080fd5b81019080805190602001909291905050505081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209080519060200190610a91929190610d38565b5050505050565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4e6f207065726d697373696f6e20746f2063616c6c210000000000000000000081525060200191505060405180910390fd5b610b696005610c0c565b90508060049080519060200190610b81929190610d38565b5080905090565b816001015482600001805490506001846002015401811515610ba657fe5b061415610bb257600080fd5b80826000018360020154815481101515610bc857fe5b906000526020600020019080519060200190610be5929190610db8565b5081600001805490506001836002015401811515610bff57fe5b0682600201819055505050565b60606000826001015483600201541415610c2557600080fd5b826000018360010154815481101515610c3a57fe5b906000526020600020019050808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cdb5780601f10610cb057610100808354040283529160200191610cdb565b820191906000526020600020905b815481529060010190602001808311610cbe57829003601f168201915b50505050509150826000018360010154815481101515610cf757fe5b906000526020600020016000610d0d9190610e38565b82600001805490506001846001015401811515610d2657fe5b06836001018190555081915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d7957805160ff1916838001178555610da7565b82800160010185558215610da7579182015b82811115610da6578251825591602001919060010190610d8b565b5b509050610db49190610e80565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610df957805160ff1916838001178555610e27565b82800160010185558215610e27579182015b82811115610e26578251825591602001919060010190610e0b565b5b509050610e349190610e80565b5090565b50805460018160011615610100020316600290046000825580601f10610e5e5750610e7d565b601f016020900490600052602060002090810190610e7c9190610e80565b5b50565b610ea291905b80821115610e9e576000816000905550600101610e86565b5090565b905600a165627a7a7230582017bc503583906bc36688a8784510bd7287c2fb623ea5760b7554e7b02c4ca90e0029";
    String contractM_address = "0xff621ebe4a4056cc5d12c62af001a84f40a78d51";
    Credentials credentials_mid;
    public String gasPrice;
    public String gasLimit;
    Web3j web3j;
    ApplicationContext context_chain1;
    ThreadPoolExecutor threadPoolExecutor;

    public Oracle(){
        //acquire tool class
        //deploy parameter
        BigInteger gasPrice = new BigInteger("300000000");
        BigInteger gasLimit = new BigInteger("300000000");
        getService = new GetService();
        context_chain1 = getService.getContext("applicationContext.xml");
        web3j = getService.getWeb3j(context_chain1);
        credentials_mid = getService.getCredentialsUseP12(context_chain1)
        threadPoolExecutor = new ThreadPoolExecutor(100, 1500, 60, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
    }

    public void getRequest(){
        while (true){
            boolean result = searchQueue();
            if (!result){
                continue;
            }
            else {
                threadPoolExecutor.execute(new Runnable() {
                    @Override
                    public void run() {
                        getTask();
                    }
                });
            }
        }
    }

    public boolean searchQueue(){
        MidSearchCrossChain contract_M = MidSearchCrossChain.load(contractM_address, web3j, credentials_mid, new StaticGasProvider(gasPrice, gasLimit));
        TransactionDecoder txDecodeSampleDecoder = TransactionDecoderFactory.buildTransactionDecoder(abi, bin);
        String request = getService.getRequest();
        TransactionReceipt send6 = contract_M.isExist().send();
        String input = send6.getInput();
        String output = send6.getOutput();
        String jsonResult = txDecodeSampleDecoder.decodeOutputReturnJson(input, output);
        InputAndOutputResult objectResult = txDecodeSampleDecoder.decodeOutputReturnObject(input, output);
        String data = contract_M.returnResult().send();
        String result = getService.getSplit(data, 0);
        return Boolean.parseBoolean(result);
    }

    public void getTask(){
        MidSearchCrossChain contract_M = MidSearchCrossChain.load(contractM_address, web3j, credentials_mid, new StaticGasProvider(gasPrice, gasLimit));
        TransactionDecoder txDecodeSampleDecoder = TransactionDecoderFactory.buildTransactionDecoder(abi, bin);
        String request = getService.getRequest();
        TransactionReceipt send6 = contract_M.popRequet().send();
        String input = send6.getInput();
        String output = send6.getOutput();
        String jsonResult = txDecodeSampleDecoder.decodeOutputReturnJson(input, output);
        InputAndOutputResult objectResult = txDecodeSampleDecoder.decodeOutputReturnObject(input, output);
        String data = contract_M.returnResult().send();
        String result = getService.getSplit(data, 0);
        String id = getService.getSplit(data, 0);
        String pub1 = getService.getSplit(data, 1);
        String pub2 = getService.getSplit(data, 2);
        String dat = getService.getSplit(data, 3);
        String extra = getService.getSplit(data, 4);
        ExcExcuteScript.excuteOracle(id,pub1,pub2,dat,extra);
    }

}
